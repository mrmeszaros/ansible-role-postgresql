---
# tasks file for repleo.postgresql

- name: Add postgresql apt repository signing key
  apt_key:
    url: https://www.postgresql.org/media/keys/ACCC4CF8.asc
  when: ansible_os_family == "Debian"

- name: Add postgresql apt repository
  apt_repository:
    repo: deb http://apt.postgresql.org/pub/repos/apt/ {{ ansible_lsb.codename }}-pgdg main
    filename: postgresql
  when: ansible_os_family == "Debian"

- name: Install the selinux python module
  yum: name=libselinux-python state=present
  when: ansible_os_family == "RedHat"

- name: Copy the epel packages
  copy: src=epel.repo dest=/etc/yum.repos.d/epel_ansible.repo
  when: ansible_os_family == "RedHat"

- name: Install the postgres packages
  yum: name="{{ redhat_pkg }}" state=present
  when: ansible_os_family == "RedHat"

- name: Install the postgres packages
  apt: name="{{ ubuntu_pkg }}" state=present update_cache=yes
  when: ansible_os_family == "Debian"

- name: Install python helper packages
  vars:
    python_version_suffix: "{{ '3' if ansible_python.version.major == 3 else '' }}"
  apt:
    name:
      - python{{ python_version_suffix }}-pip
      - python{{ python_version_suffix }}-dev
      - python{{ python_version_suffix }}-selinux
  when: ansible_os_family == "Debian"

- name: Install python pip packages for database configuration
  pip: name={{ item.name }} version={{ item.version }}
  with_items:
  - {name: 'psycopg2', version: '2.6' }

- name: start the postgresql service
  service: name=postgresql state=started enabled=yes

- name: Create database if not exist
  become: yes
  # TODO review whether the become_method matters anyhow
  become_method: sudo
  become_user: postgres
  postgresql_db: name="{{ item.name }}"
  with_items:
   - "{{ databases }}"
  when:
   - item.name is defined
   - item.name != None

- name: Create database user
  become: yes
  # TODO review whether the become_method matters anyhow
  become_method: sudo
  become_user: postgres
  postgresql_user: db="{{ item.0.name }}" name="{{ item.1.user }}" password="{{ item.1.password }}"
  with_subelements:
   - "{{ databases }}"
   - users
  when:
   - item.0.name is defined
   - item.0.name != None
   - item.1.user is defined
   - item.1.user != None

- name: Set database user privileges
  become: yes
  # TODO review whether the become_method matters anyhow
  become_method: sudo
  become_user: postgres
  postgresql_privs: >
    db="{{ item.0.name }}"
    privs="{{ item.1.privileges }}"
    type="{{ item.1.type }}"
    role="{{ item.1.user }}"
  with_subelements:
   - "{{ databases }}"
   - users
  when:
   - item.0.name is defined
   - item.0.name != None
   - item.1.user is defined
   - item.1.user != None
